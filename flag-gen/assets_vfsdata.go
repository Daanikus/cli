// Code generated by vfsgen; DO NOT EDIT.

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// assets statically implements the virtual filesystem provided to vfsgen.
var assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Time{},
		},
		"/source": &vfsgen۰DirInfo{
			name:    "source",
			modTime: time.Time{},
		},
		"/source/flag-types.json": &vfsgen۰CompressedFileInfo{
			name:             "flag-types.json",
			modTime:          time.Time{},
			uncompressedSize: 3949,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x95\xdf\x6b\xdb\x30\x10\xc7\xdf\xf3\x57\xdc\x34\x06\xce\x08\x4e\x1f\x4a\x1f\x02\x7b\x19\x63\x23\x6f\x83\xac\x7b\x89\x43\x50\x6d\xd9\x15\x53\x24\x23\x9d\x4b\x4a\xc8\xff\x3e\xa4\xd4\x8d\xad\xd8\xf9\xd1\x62\x93\xbe\x14\xf4\x3d\x4b\x77\xf7\xe9\xf7\x72\xf3\x01\xc0\x66\x00\x00\x40\x24\x5d\x31\x32\x01\xf2\x5d\x29\x41\x46\x3b\x0d\x9f\x73\xa7\x3d\x54\xb4\x27\x2a\x0a\x2b\xa6\x54\x18\xf6\xa2\x25\xcc\x20\x99\x00\xea\xa2\x54\x62\x25\x91\xad\x71\x99\xb0\x94\x16\xc2\x06\x89\xbb\x50\xbe\x92\x53\x6d\x98\xb6\xb2\x41\x1d\x2b\xf9\x14\xfe\xb6\x8a\x4d\x1e\xa4\xe1\x5f\x9b\x23\x9c\xa1\xe6\x32\x0b\x86\xc3\x5a\xea\xa5\x71\xb2\xbd\xaa\x19\x16\x5a\x42\x44\x22\x52\xf9\x84\x27\x14\x95\x36\x64\x02\xf3\xc5\x00\x60\x3b\x6a\xee\xf1\xcf\xfb\x9b\x4c\x54\x8c\x94\x0b\x7b\x19\xf0\x91\x22\x70\xe3\xc2\xf0\xf0\x0c\x65\xe3\x1f\x82\xc7\x8f\x42\x53\xe4\x4a\xfa\x48\x90\xaf\x58\xe8\x07\x4b\x36\x55\x10\x47\xd1\x04\x86\x31\x78\x44\xcc\xcd\x64\x3c\xce\x94\xa0\x32\x0b\x95\xce\xc6\xf9\xbf\x6c\x6c\x33\x8c\x3f\xbb\x5e\xcb\x3c\xc3\x23\xcc\x6e\x0e\x79\xb9\x1a\x6b\x0f\x5c\x0c\xcc\xff\xfe\x32\x78\x3f\x85\xa2\x78\x77\xeb\xb3\x4b\xeb\xf2\x59\xd4\xce\xeb\xb8\xe6\x10\x97\xfd\xa0\xe3\x11\xdc\xdd\x9e\xec\x7a\x85\xe1\x2c\xd7\x5c\x62\x1a\x44\xe4\x4b\x1a\x91\x51\x49\xa2\x85\x80\xd3\x00\xc8\x8a\x97\x66\xb0\x07\xba\xde\x1f\xe2\xc2\xa0\x5a\x11\x77\x6c\xe3\xf5\x8b\x49\xa6\x79\xec\xf3\xf2\xe4\x76\x5e\xd5\x99\x6c\x00\x26\xb9\xf0\x0d\x54\xa6\xe0\x12\x99\x4e\x69\xcc\x36\xdb\x36\x36\x3c\x2d\x19\xc0\xa7\x6f\x20\xb9\x80\x4d\x24\x23\x8c\xb0\xc5\x2a\x36\xb8\xb5\x7f\x4e\xce\xde\x25\x88\xa6\xb2\xc1\x50\x5c\xf6\x60\xa7\xa9\x6c\x32\xd3\xcd\x1b\xfc\x94\xf4\xe5\xa7\xa9\xc4\x06\x54\xd7\x00\x6a\x77\x75\x19\x53\x97\xcf\x56\x15\x38\x29\xe9\x10\x65\x95\x5e\x8d\xeb\x99\x28\x67\x82\xc7\xcc\xe7\xf9\xd5\x0f\x74\x31\x9d\xf3\x45\xe5\xdf\xb6\xa7\xfe\x4a\x39\x78\xad\x62\x38\xdc\x49\x96\x38\xd3\x5a\xe9\x40\x72\xd1\xca\xb4\xbb\x91\x3e\x3a\xbe\xad\x20\xbd\x50\x67\x28\xf7\x3f\x16\x6d\x30\x5f\x2a\xb9\x76\x9c\xbb\x97\x7c\x94\xa6\xa6\xbe\x75\xcc\xab\xd5\xec\x31\x1d\x0e\xf6\x69\x2e\xf5\xf6\x8f\x4f\xa9\x66\x19\x5b\xe7\x97\xcd\xe6\xae\x96\x66\x57\x35\xc4\xba\xb1\x55\x1d\x7a\xa3\xaf\x2a\xb5\x5c\xbb\xb1\xee\x79\xd3\x9e\x2d\x7a\x59\xb4\x36\xf7\x47\xdb\xb4\xf7\xfc\x70\xd5\x16\x3d\xec\xda\xb3\x58\x79\xcb\xb6\xe8\x65\xdb\x9e\x8f\x73\xb0\x18\xfc\x0f\x00\x00\xff\xff\xd7\x46\xce\x70\x6d\x0f\x00\x00"),
		},
		"/templates": &vfsgen۰DirInfo{
			name:    "templates",
			modTime: time.Time{},
		},
		"/templates/altsrc_flags_generated.gotpl": &vfsgen۰CompressedFileInfo{
			name:             "altsrc_flags_generated.gotpl",
			modTime:          time.Time{},
			uncompressedSize: 1044,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x92\x4f\x8b\xdb\x30\x10\xc5\xcf\xd6\xa7\x78\x84\xa5\xc4\x4b\xb0\xef\x29\x7b\x28\xdd\x2d\xf4\x92\x2d\xec\x42\xcf\x8a\x3c\xb2\x45\x15\xdb\x48\xe3\x84\x20\xfc\xdd\xcb\x38\x61\xfb\x4f\x29\xbd\xf4\x66\x69\xf4\xde\x9b\xdf\x8c\xeb\x1a\x1f\x87\x86\xd0\x52\x4f\x41\x33\x35\xd8\x9f\x61\xdb\xf7\x78\x7c\xc6\xee\xf9\x15\x4f\x8f\x9f\x5f\x2b\xa5\x46\x6d\xbe\xe9\x96\x90\x12\xaa\x2f\x97\xef\x9d\x3e\x10\xe6\x59\x29\x77\x18\x87\xc0\x58\xab\x62\x65\xbd\x6e\x57\xaa\x58\xb5\x8e\xbb\x69\x5f\x99\xe1\x50\x4f\xc1\xea\x23\xd5\xc6\xbb\x95\x2a\x55\x4a\x08\xba\x6f\x09\x77\x6e\x83\x3b\x79\x8e\xed\x03\xaa\x4f\x5e\xb7\x51\xcc\xea\x5a\x22\x96\x42\x75\x0d\x90\x1a\x5c\x04\x77\x84\x45\xc0\xe7\x91\xc0\x9d\x66\x9c\x82\x1e\x23\x8c\x77\x55\x56\xc4\x03\xb4\xf7\xc3\x49\x5c\xed\x10\x30\x70\x47\x01\x47\xed\x27\x8a\x52\xdc\x13\xe2\x48\xc6\x59\x47\x8d\x5a\x5c\xb3\x36\x91\xc3\x64\x18\x49\x15\xb7\x92\x54\x11\x89\x71\xbf\x5c\xcb\xf9\x85\x58\xcd\x4a\x62\x77\x74\xca\x7a\x9a\x40\x9a\x29\x42\xa3\xa7\x53\x36\x56\xd9\xa9\x37\xb7\xf4\x6b\xeb\x6f\x62\x97\xb8\xcf\x46\x26\x55\x04\xe2\x29\xf4\x78\x97\xab\xa7\x6c\x17\x5b\x58\xbf\x41\x24\xde\xa2\x77\x1e\xf3\x15\xeb\xc3\x38\xfa\x33\xa2\x3e\xd2\x8f\xbd\xbc\x10\x2f\x53\xf6\x9a\x29\x60\x8a\xf2\xbb\x18\xed\x7d\xdc\xc8\x93\xfe\xf2\x2d\x62\x11\xc8\xe6\x46\x6a\xb2\x99\xd5\xe2\x7e\xe1\x5f\xdb\x3c\x4d\x79\x69\x61\xfd\xc7\xdc\x4b\xe1\xb4\x95\xdc\x3f\x48\xdf\x72\xb8\x1d\x22\xfa\xf2\x67\xa6\xaf\x8e\xbb\xa7\x10\x86\xf0\x7f\xe1\xde\x62\xfe\x89\xf2\xed\x75\x0e\x97\x96\x6e\x7f\x87\xbe\x6e\xfa\x6f\xec\xbf\xb8\xca\x10\x52\x02\xf5\x0d\xe6\xf9\x7b\x00\x00\x00\xff\xff\x6d\x3d\x9e\xe0\x14\x04\x00\x00"),
		},
		"/templates/cli_flags_generated.gotpl": &vfsgen۰CompressedFileInfo{
			name:             "cli_flags_generated.gotpl",
			modTime:          time.Time{},
			uncompressedSize: 3795,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\x5b\x6f\xdb\x38\x13\x7d\xa6\x7e\xc5\xd4\x68\x0b\x2b\xf0\x27\xbf\x37\x5f\xf6\x25\x97\x6e\x81\x6d\x1b\xb4\xd9\xbc\x33\xd2\xc8\x26\x42\x91\x2e\x49\x39\x0e\xbc\xfe\xef\x8b\xe1\x45\xa6\x2f\xa8\x8d\x5d\x74\x9f\x4c\x71\x86\x67\xce\x9c\x19\x0e\x3d\x9d\xc2\xb5\x6e\x10\x66\xa8\xd0\x70\x87\x0d\x3c\xbd\x42\x3b\xbb\x84\x9b\xaf\xf0\xe5\xeb\x03\xdc\xde\x7c\x7a\xa8\x8a\x62\xc1\xeb\x67\x3e\x43\x58\xaf\xa1\xba\x0f\xeb\x2f\xbc\x43\xd8\x6c\x8a\x42\x74\x0b\x6d\x1c\x8c\x0b\x36\x6a\x25\x9f\x8d\xe8\xb7\x73\xf4\x63\x70\x86\xab\x05\xad\xac\x33\xb5\x56\x4b\x5a\x3a\xd1\xe1\xa8\x28\x8b\xf5\x1a\x0c\x57\x33\x84\xb7\x62\x02\x6f\xe9\x24\x7c\xb8\x82\xea\x4e\xf2\x99\x25\xdc\xe9\x94\xa2\x79\x43\x15\x63\x91\x0d\x84\x05\x0e\xde\xfd\x45\xb8\x39\xb8\xd7\x05\x6e\x1d\x1f\xe8\x6b\xb3\x19\xbe\x6f\x74\xed\xb8\x90\x84\xb7\xeb\x98\x23\x5a\x67\xfa\xda\xc1\xba\x60\xb4\xcb\x18\xb3\xce\x08\x35\x2b\xd8\x9f\x96\xcf\xf2\xef\x5b\xb5\x7c\xe4\x26\xdb\xb8\x13\x12\xef\xb9\x9b\x6f\x77\xbe\xe1\x8f\x5e\x18\x6c\x18\x7b\xd2\x5a\x16\xec\x77\xd1\x34\xa8\x58\xfa\x5c\xaf\xff\x07\xa2\x05\xfc\x11\x69\x3c\x72\xd9\x23\x38\xd3\x7b\x29\x99\xff\x64\x8c\xed\xe7\x13\x0e\xa2\x6a\x86\x75\x0e\x72\x83\xd6\x09\xc5\x9d\xd0\x6a\x0b\x95\x6d\x32\x76\x71\x1a\x30\xab\xc5\xd2\x17\xe2\x91\x4b\xd1\x70\xa7\x8d\xdd\x0f\xba\x84\x54\xd9\x68\xa1\xad\xbf\xc0\x09\x27\x09\x1b\x18\x63\x17\xc1\xa1\xfa\xe6\x7f\x62\x34\x69\x31\x83\xa8\x7b\xeb\x74\x17\x20\xae\xfd\x7a\x88\xc8\xda\x5e\xd5\xe3\x7d\xce\x25\xa0\x31\xda\x64\x60\xc7\xa2\x33\x76\x56\xba\x71\xbd\x29\xa8\xcf\xbe\xfb\xe2\x81\x41\xd7\x1b\x45\xed\x65\x90\x37\xfc\x49\x22\x18\x5c\x18\xb4\xa8\x5c\x50\x57\xb7\xe0\xe6\xc2\xc2\x92\xea\x44\x27\xc7\xad\x36\xd0\x53\x9b\x40\x83\x2d\xef\xa5\xb3\x65\x41\xec\x61\xdc\x1e\x6d\xb6\x32\x06\x1b\x97\x10\x5a\x86\xda\x2e\x04\x06\xb2\x07\x2b\x9a\x71\x5b\x46\x72\x1f\xd1\xf9\xf3\x89\x9d\x9b\x23\x28\xda\xf0\x64\xd0\x5f\x85\x13\x21\x23\xc4\xb1\x98\xad\xf7\x8c\xa1\x3e\xd9\xd4\xbe\x43\xb4\x97\x39\xba\x39\x1a\xd0\x06\x94\x76\x43\x40\xba\x85\x26\xfa\x9e\x08\xbe\x05\x1d\x97\x40\xb7\x60\x27\x7a\xb2\x45\x06\x0f\xfc\x19\x6d\xb8\x14\x43\xbe\xd4\xd1\x59\xae\xe0\xc8\x07\x78\x28\xc2\x04\x34\xf1\x7b\x11\x16\xa1\xe5\xd2\xe2\x09\x36\xdb\x00\x87\x6c\x86\x13\x81\xc0\xd0\x1e\x1f\xd1\xf9\x49\xb0\x53\x82\x50\xf4\xa8\x27\x75\xc1\xf9\xb5\xf0\x60\xc7\x8b\xe1\x4d\xdb\xb0\x7b\x4a\xc4\x08\xb1\xff\x80\xdb\x04\xb1\xd7\xa6\x5c\x35\xc0\x15\x60\xb7\x70\xaf\x84\x14\xbd\xc4\x81\x88\x4a\x27\x28\x07\x5c\xca\xea\x34\xf7\x24\xdd\x96\xfb\xae\x6a\xf1\x2a\x05\xed\xe2\xcc\xd8\x1b\x25\xd3\x29\xc4\x8d\x6d\x6a\xc4\x96\x2e\xf7\x0e\xc7\x46\x7b\x8a\x0e\x16\xdc\x86\xec\x97\xe1\x1c\xe5\x58\x1b\xe1\xd0\x08\x4e\x70\x0d\xb6\x42\x85\xa7\x2b\x94\x06\xcd\x89\x4c\x12\x81\xf1\x92\x4b\x10\xca\xa1\x69\x79\x8d\xeb\x34\x63\x28\xaf\x20\xcc\x87\x2b\x0a\x5a\x1d\x0e\xa3\xe2\xdf\x8e\x4d\xd1\xfa\xf6\xa7\x0d\x78\x73\x05\x4a\x48\x78\xff\x1e\xde\xa4\xbd\xea\x33\x77\xf5\x3c\x0e\x0b\xcf\xa5\x24\x56\x43\xab\x74\xae\xba\x25\xaa\xed\x78\x14\x98\xea\x36\xa8\xf6\xce\xd2\xe5\x24\xd9\xbc\x5a\x15\xcc\xb4\x83\x77\xcb\xd1\x04\xda\x6a\x18\x04\x93\x50\xf7\xb2\x60\x9b\x93\xc3\xd9\x13\xdd\x9b\xd0\x89\x31\x31\xa2\x53\xc6\x50\xf2\x07\x6e\x91\xf8\xa5\x77\xc8\x8e\xa4\x2c\xd0\x98\x82\x11\x85\xe3\x2c\x3a\xa1\x46\x03\x83\xcf\x42\x65\x3a\x85\x9c\xff\x0f\x17\xc1\x70\x4a\x99\x77\x36\x88\x63\xe7\xba\x97\x0d\xcc\xf9\x12\x81\x43\x27\x94\xe8\xfa\x0e\xb6\x6e\xcb\x1d\xb9\x48\xab\x49\x0c\x71\x4a\xb1\x8e\xaf\x32\xae\x7c\x75\xc0\xf5\x37\x0f\xc4\x57\xff\x94\x2b\x5f\x9d\xc9\x95\xaf\x0e\xb9\x1e\xbe\x7c\x89\x82\x12\xb2\xd8\x14\x99\xe1\xd8\x1f\x2f\x90\x5a\x3f\x5b\xe8\x17\xe9\x16\x06\x0a\x1c\xa4\xae\xb9\x3c\x7a\xc7\x26\xe9\x6e\xef\xe0\x5d\x6b\xe5\x70\xe5\x6e\xc2\x5b\x49\xc8\xa2\xf5\xbd\xda\xea\x5e\xa5\x97\xa4\x86\x8b\xe8\x57\x1e\x40\x8f\xfd\xd3\x17\xa6\x8f\xb7\xd2\x79\x84\x04\xec\x6f\xe7\x68\x94\xff\x05\xcc\x2d\x7e\x3b\xfe\x75\x38\xfc\xcf\x98\x24\xc8\x26\x32\xe5\xdd\x2f\x8e\x92\x98\x40\x5d\xd1\xe6\x77\x74\xc3\x53\x2d\xf5\x13\x97\x67\x8b\x37\xf3\xee\xbf\x52\xbd\xe3\x84\xfe\x2b\x0d\xe9\x2a\x58\x9a\x0b\x41\xc5\x40\xe6\x2e\x48\x96\x24\x2c\x2f\xc9\x27\x1b\x0d\xe7\x08\xdf\xda\xd0\xda\xfb\xef\xf6\x81\x3e\x54\x17\xaf\xca\x4f\xe0\xa2\x10\x13\xb0\xe8\xe0\xc2\x9b\x23\xc7\x5f\xa9\x4d\x4b\xba\x58\x74\xd5\x1f\x9e\x99\x67\x52\x06\xc9\x72\x35\xb6\x04\xee\xb9\xb1\x68\x42\xec\x05\xad\x9b\x49\x1a\xbb\x43\xa4\xe8\x93\xb3\xd8\x73\x6d\xc3\x2b\x3d\x09\xcf\xdc\x58\x09\x59\x92\x6f\x1c\x09\x69\x94\x1f\x99\xd4\x3f\xd1\xd8\x0f\xf0\x03\xa6\xd7\xdc\xba\xc0\x76\x1f\x21\xb3\xe7\x4c\xa3\x5b\x20\x9c\x91\x3a\xb3\xce\xdb\x13\x7f\x07\x00\x00\xff\xff\x63\xf2\x8e\xad\xd3\x0e\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/source"].(os.FileInfo),
		fs["/templates"].(os.FileInfo),
	}
	fs["/source"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/source/flag-types.json"].(os.FileInfo),
	}
	fs["/templates"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/templates/altsrc_flags_generated.gotpl"].(os.FileInfo),
		fs["/templates/cli_flags_generated.gotpl"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
